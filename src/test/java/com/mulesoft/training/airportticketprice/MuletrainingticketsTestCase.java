/*
 * Generated by the Mule project wizard. http://mule.mulesoft.org
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package com.mulesoft.training.airportticketprice;

import org.junit.Test;
import org.mule.api.MuleMessage;
import org.mule.api.client.MuleClient;
import org.mule.tck.junit4.FunctionalTestCase;
import org.mule.transport.NullPayload;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

public class MuletrainingticketsTestCase extends FunctionalTestCase
{
    protected String getConfigResources()
    {
        //You'll need to edit this file to make the test applicable to your module
        return "mule-config.xml";
    }

    @Test
    public void testAirportCodeKOA() throws Exception
    {
        MuleClient client = muleContext.getClient();

        MuleMessage result = client.send("vm://ticketPriceRequest", "KOA", null);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);

        List<String> responseList = (List<String>) result.getPayload();

        //Assert the correct data has been received
        assertEquals("$1500 (USD) United Airlines",responseList.get(0));
        assertEquals("$1200 (USD) Delta Airlines",responseList.get(1));
        assertEquals("$1600 (USD) FinnAir Airlines",responseList.get(2));
        assertEquals("$1520 (USD) Frontier Airlines",responseList.get(3));
    }

    @Test
    public void testAirportCodeSFO() throws Exception
    {
        MuleClient client = muleContext.getClient();

        MuleMessage result = client.send("vm://ticketPriceRequest", "SFO", null);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);

        List<String> responseList = (List<String>) result.getPayload();

        //Assert the correct data has been received
        assertEquals("$400 (USD) United Airlines",responseList.get(0));
        assertEquals("$300 (USD) Delta Airlines",responseList.get(1));
        assertEquals("$700 (USD) FinnAir Airlines",responseList.get(2));
        assertEquals("$420 (USD) Frontier Airlines",responseList.get(3));
    }

    @Test
    public void testAirportCodeOAK() throws Exception
    {
        MuleClient client = muleContext.getClient();

        MuleMessage result = client.send("vm://ticketPriceRequest", "OAK", null);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);

        List<String> responseList = (List<String>) result.getPayload();

        //Assert the correct data has been received
        assertEquals("$300 (USD) United Airlines",responseList.get(0));
        assertEquals("$400 (USD) Delta Airlines",responseList.get(1));
        assertEquals("$200 (USD) FinnAir Airlines",responseList.get(2));
        assertEquals("$320 (USD) Frontier Airlines",responseList.get(3));
    }

    @Test
    public void testAirportCodeLAX_VM() throws Exception
    {
        MuleClient client = muleContext.getClient();

        MuleMessage result = client.send("vm://ticketPriceRequest", "LAX", null);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);

        List<String> responseList = (List<String>) result.getPayload();

        //Assert the correct data has been received
        assertEquals("$550 (USD) United Airlines",responseList.get(0));
        assertEquals("$650 (USD) Delta Airlines",responseList.get(1));
        assertEquals("$350 (USD) FinnAir Airlines",responseList.get(2));
        assertEquals("$520 (USD) Frontier Airlines",responseList.get(3));
    }

    @Test
    public void testAirportCodeLAX_Http() throws Exception
    {
        MuleClient client = muleContext.getClient();

        Map httpProps = new HashMap();
        httpProps.put("http.method","GET");

        MuleMessage result = client.send("http://localhost:8444?airportCode=LAX", null, httpProps);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);

        String responseString = result.getPayloadAsString();

        //Assert the correct data has been received
        assertEquals("[$550 (USD) United Airlines, $650 (USD) Delta Airlines, $350 (USD) FinnAir Airlines, $520 (USD) Frontier Airlines]",responseString.toString());
    }


}
